// Generated by gencpp from file quest2ros/OVR2ROSHapticFeedback.msg
// DO NOT EDIT!


#ifndef QUEST2ROS_MESSAGE_OVR2ROSHAPTICFEEDBACK_H
#define QUEST2ROS_MESSAGE_OVR2ROSHAPTICFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quest2ros
{
template <class ContainerAllocator>
struct OVR2ROSHapticFeedback_
{
  typedef OVR2ROSHapticFeedback_<ContainerAllocator> Type;

  OVR2ROSHapticFeedback_()
    : frequency(0.0)
    , amplitude(0.0)  {
    }
  OVR2ROSHapticFeedback_(const ContainerAllocator& _alloc)
    : frequency(0.0)
    , amplitude(0.0)  {
  (void)_alloc;
    }



   typedef float _frequency_type;
  _frequency_type frequency;

   typedef float _amplitude_type;
  _amplitude_type amplitude;





  typedef boost::shared_ptr< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct OVR2ROSHapticFeedback_

typedef ::quest2ros::OVR2ROSHapticFeedback_<std::allocator<void> > OVR2ROSHapticFeedback;

typedef boost::shared_ptr< ::quest2ros::OVR2ROSHapticFeedback > OVR2ROSHapticFeedbackPtr;
typedef boost::shared_ptr< ::quest2ros::OVR2ROSHapticFeedback const> OVR2ROSHapticFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator1> & lhs, const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.frequency == rhs.frequency &&
    lhs.amplitude == rhs.amplitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator1> & lhs, const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quest2ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70169d48245fcf63af46b9faf76bdbdf";
  }

  static const char* value(const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70169d48245fcf63ULL;
  static const uint64_t static_value2 = 0xaf46b9faf76bdbdfULL;
};

template<class ContainerAllocator>
struct DataType< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quest2ros/OVR2ROSHapticFeedback";
  }

  static const char* value(const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 frequency\n"
"float32 amplitude\n"
;
  }

  static const char* value(const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OVR2ROSHapticFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quest2ros::OVR2ROSHapticFeedback_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUEST2ROS_MESSAGE_OVR2ROSHAPTICFEEDBACK_H
