// Generated by gencpp from file quest2ros/OVR2ROSInputs.msg
// DO NOT EDIT!


#ifndef QUEST2ROS_MESSAGE_OVR2ROSINPUTS_H
#define QUEST2ROS_MESSAGE_OVR2ROSINPUTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quest2ros
{
template <class ContainerAllocator>
struct OVR2ROSInputs_
{
  typedef OVR2ROSInputs_<ContainerAllocator> Type;

  OVR2ROSInputs_()
    : button_upper(false)
    , button_lower(false)
    , thumb_stick_horizontal(0.0)
    , thumb_stick_vertical(0.0)
    , press_index(0.0)
    , press_middle(0.0)  {
    }
  OVR2ROSInputs_(const ContainerAllocator& _alloc)
    : button_upper(false)
    , button_lower(false)
    , thumb_stick_horizontal(0.0)
    , thumb_stick_vertical(0.0)
    , press_index(0.0)
    , press_middle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _button_upper_type;
  _button_upper_type button_upper;

   typedef uint8_t _button_lower_type;
  _button_lower_type button_lower;

   typedef float _thumb_stick_horizontal_type;
  _thumb_stick_horizontal_type thumb_stick_horizontal;

   typedef float _thumb_stick_vertical_type;
  _thumb_stick_vertical_type thumb_stick_vertical;

   typedef float _press_index_type;
  _press_index_type press_index;

   typedef float _press_middle_type;
  _press_middle_type press_middle;





  typedef boost::shared_ptr< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> const> ConstPtr;

}; // struct OVR2ROSInputs_

typedef ::quest2ros::OVR2ROSInputs_<std::allocator<void> > OVR2ROSInputs;

typedef boost::shared_ptr< ::quest2ros::OVR2ROSInputs > OVR2ROSInputsPtr;
typedef boost::shared_ptr< ::quest2ros::OVR2ROSInputs const> OVR2ROSInputsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quest2ros::OVR2ROSInputs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quest2ros::OVR2ROSInputs_<ContainerAllocator1> & lhs, const ::quest2ros::OVR2ROSInputs_<ContainerAllocator2> & rhs)
{
  return lhs.button_upper == rhs.button_upper &&
    lhs.button_lower == rhs.button_lower &&
    lhs.thumb_stick_horizontal == rhs.thumb_stick_horizontal &&
    lhs.thumb_stick_vertical == rhs.thumb_stick_vertical &&
    lhs.press_index == rhs.press_index &&
    lhs.press_middle == rhs.press_middle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quest2ros::OVR2ROSInputs_<ContainerAllocator1> & lhs, const ::quest2ros::OVR2ROSInputs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quest2ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8758130cf7abdc4f62ab78aeafd59057";
  }

  static const char* value(const ::quest2ros::OVR2ROSInputs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8758130cf7abdc4fULL;
  static const uint64_t static_value2 = 0x62ab78aeafd59057ULL;
};

template<class ContainerAllocator>
struct DataType< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quest2ros/OVR2ROSInputs";
  }

  static const char* value(const ::quest2ros::OVR2ROSInputs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Inputs\n"
"bool button_upper\n"
"bool button_lower\n"
"float32 thumb_stick_horizontal\n"
"float32 thumb_stick_vertical\n"
"float32 press_index\n"
"float32 press_middle\n"
;
  }

  static const char* value(const ::quest2ros::OVR2ROSInputs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button_upper);
      stream.next(m.button_lower);
      stream.next(m.thumb_stick_horizontal);
      stream.next(m.thumb_stick_vertical);
      stream.next(m.press_index);
      stream.next(m.press_middle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OVR2ROSInputs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quest2ros::OVR2ROSInputs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quest2ros::OVR2ROSInputs_<ContainerAllocator>& v)
  {
    s << indent << "button_upper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_upper);
    s << indent << "button_lower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_lower);
    s << indent << "thumb_stick_horizontal: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_stick_horizontal);
    s << indent << "thumb_stick_vertical: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_stick_vertical);
    s << indent << "press_index: ";
    Printer<float>::stream(s, indent + "  ", v.press_index);
    s << indent << "press_middle: ";
    Printer<float>::stream(s, indent + "  ", v.press_middle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUEST2ROS_MESSAGE_OVR2ROSINPUTS_H
